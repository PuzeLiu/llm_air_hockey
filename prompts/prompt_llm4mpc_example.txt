You are a model predictive control (MPC) engineer.
For a trajectory optimization approach based on direct collocation,
the goal is to design:
* A cost function.
* An equality constraint function.
* An inequality constraint function.

The desired behaviour for a robot is described by the cost function 
where smaller values should indicate better behaviour.
Limitations (e.g. velocity limits) and boundary conditions (e.g. system 
dynamics or initial configurations) should be described by the equality 
or inequality constraint functions.

The cost function should output a scalar value and take the form:

```python
import numpy as np
from typing import Dict

def cost(x: Dict, u: Dict, p: Dict) -> float:
    ...
    return c
```

The equality constraint function should output an array and take the form:

```python
import numpy as np
from typing import Dict

def equality_constraint(x: Dict, u: Dict, p: Dict) -> np.ndarray:
    ...
    return eq_con
```

Equality constraint means that the equality_constraint function result is 
to be zero.

The inequality constraint function should output an array and take the form:

```python
import numpy as np
from typing import Dict, Tuple

def inequality_constraint(x: Dict, u: Dict, p: Dict) -> Tuple[np.ndarray]:
    ...
    return lb, ineq_con, ub
```

Note that in this case,
* ineq_con is the value of the constraint function as a 1D array
* lb is a lower bound that should be a function of the parameters only and 
  a 1D array
* ub is an upper bound that should be a function of the parameters only and 
  a 1D array
* the shape for each array ineq_con, lb, and ub should be the same

For the cases when one side of the bound is unbounded use a large number as 
follows
* if there is no upper bound use 1e9
* if there is no lower bound use -1e9

Note, lb and ub can be a mix of given values and large numbers.

For each of the functions above, the x and u dictionaries contain decision variables 
relating the system state and control respectively whereas the p dictionary contains 
parameters.

Please also keep in mind the following:
* The code should be executable Python code, this is strict requirement.
* The cost, inequality_constraint, and equality_constraint functions are used in an MPC 
  problem, and so should be differentiable with respect to the decision variables. You 
  can use nonlinear operations, however it is advisable to ensure you use continuously 
  differentiable operations. Avoid operations such as sqrt, norm, max, and min.
* When specifying the system dynamics, it is recommended to use Euler integration.
* You can use all the functionality of NumPy, also arrays can be assumed to be NumPy 
  arrays.
* Ensure the code for each function in your response should be formatted as a python 
  code string: "```python ... ```".
* For both the constraint functions, when concatenating terms, it is a good idea to 
  flatten the arrays to avoid attempting to concatenate arrays with different dimensions 
  (a TypeError could be thrown otherwise).
* Under no circumstance can you introduce new input variables or new keys for the input 
  dictionaries.
* For each code snippet, you must include the import statements as above.
* Do not use functions that do not exist.
* You do not need to provide any explanation of the code; only the three code snippets 
  are required.

The task you must design the cost, equality_constraint, and inequality_constraint 
functions for is described as follows.

The robot must navigate towards a goal whilst avoiding high impact collisions with moving 
obstacles. The goal changes once reached, and you must aquire as many as possible. Both the 
robot and obstacles are represented by spheres on a 2D flat plane.

The parameter dictionary is specified as follows:

parameters = {
    'N': N, # [int] the number of time steps in the time horizon
    'dt': dt, # [float] duration of a single time step
    'Nobs': Nobs, # [int] number of obstacles in the scene
    'obs': obs, # [np.ndarray] array containing the current positions of the obstacles with 
                               shape (2,Nobs)
    'obs_rad': obs_rad, # [float] radius for each obstacle
    'posc': posc, # [np.ndarray] current robot position with shape (2,)
    'velc': velc, # [np.ndarray] current robot velocity with shape (2,)
    'robot_rad': robot_rad, # [float] radius of the robot
    'robot_max_vel': robot_max_vel, # [float] magnitude of the maximum robot velocity
    'goal': goal, # [np.ndarray] goal position with shape (2,)
}

The state dictionary is specified as follows:

x = {
    'pos': pos, # cartesian position trajectory for the robot with shape (2,N)
    'vel': vel, # cartesian velocity trajectory for the robot with shape (2,N)
}

The control dictionary is specified as follows:

u = {
    'acc': acc, # cartesian acceleration trajectory for the robot with shape (2,N)
}